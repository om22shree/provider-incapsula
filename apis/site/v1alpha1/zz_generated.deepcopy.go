//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Site) DeepCopyInto(out *Site) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Site.
func (in *Site) DeepCopy() *Site {
	if in == nil {
		return nil
	}
	out := new(Site)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Site) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiteInitParameters) DeepCopyInto(out *SiteInitParameters) {
	*out = *in
	if in.AccelerationLevel != nil {
		in, out := &in.AccelerationLevel, &out.AccelerationLevel
		*out = new(string)
		**out = **in
	}
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(float64)
		**out = **in
	}
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		*out = new(string)
		**out = **in
	}
	if in.Approver != nil {
		in, out := &in.Approver, &out.Approver
		*out = new(string)
		**out = **in
	}
	if in.DataStorageRegion != nil {
		in, out := &in.DataStorageRegion, &out.DataStorageRegion
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DomainRedirectToFull != nil {
		in, out := &in.DomainRedirectToFull, &out.DomainRedirectToFull
		*out = new(string)
		**out = **in
	}
	if in.DomainValidation != nil {
		in, out := &in.DomainValidation, &out.DomainValidation
		*out = new(string)
		**out = **in
	}
	if in.ForceSSL != nil {
		in, out := &in.ForceSSL, &out.ForceSSL
		*out = new(string)
		**out = **in
	}
	if in.HashSalt != nil {
		in, out := &in.HashSalt, &out.HashSalt
		*out = new(string)
		**out = **in
	}
	if in.HashingEnabled != nil {
		in, out := &in.HashingEnabled, &out.HashingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreSSL != nil {
		in, out := &in.IgnoreSSL, &out.IgnoreSSL
		*out = new(string)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.LogsAccountID != nil {
		in, out := &in.LogsAccountID, &out.LogsAccountID
		*out = new(string)
		**out = **in
	}
	if in.NakedDomainSan != nil {
		in, out := &in.NakedDomainSan, &out.NakedDomainSan
		*out = new(bool)
		**out = **in
	}
	if in.PerfClientComplyNoCache != nil {
		in, out := &in.PerfClientComplyNoCache, &out.PerfClientComplyNoCache
		*out = new(bool)
		**out = **in
	}
	if in.PerfClientEnableClientSideCaching != nil {
		in, out := &in.PerfClientEnableClientSideCaching, &out.PerfClientEnableClientSideCaching
		*out = new(bool)
		**out = **in
	}
	if in.PerfClientSendAgeHeader != nil {
		in, out := &in.PerfClientSendAgeHeader, &out.PerfClientSendAgeHeader
		*out = new(bool)
		**out = **in
	}
	if in.PerfKeyComplyVary != nil {
		in, out := &in.PerfKeyComplyVary, &out.PerfKeyComplyVary
		*out = new(bool)
		**out = **in
	}
	if in.PerfKeyUniteNakedFullCache != nil {
		in, out := &in.PerfKeyUniteNakedFullCache, &out.PerfKeyUniteNakedFullCache
		*out = new(bool)
		**out = **in
	}
	if in.PerfModeHTTPS != nil {
		in, out := &in.PerfModeHTTPS, &out.PerfModeHTTPS
		*out = new(string)
		**out = **in
	}
	if in.PerfModeLevel != nil {
		in, out := &in.PerfModeLevel, &out.PerfModeLevel
		*out = new(string)
		**out = **in
	}
	if in.PerfModeTime != nil {
		in, out := &in.PerfModeTime, &out.PerfModeTime
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseCache300X != nil {
		in, out := &in.PerfResponseCache300X, &out.PerfResponseCache300X
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCache404Enabled != nil {
		in, out := &in.PerfResponseCache404Enabled, &out.PerfResponseCache404Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCache404Time != nil {
		in, out := &in.PerfResponseCache404Time, &out.PerfResponseCache404Time
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseCacheEmptyResponses != nil {
		in, out := &in.PerfResponseCacheEmptyResponses, &out.PerfResponseCacheEmptyResponses
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCacheHTTP10Responses != nil {
		in, out := &in.PerfResponseCacheHTTP10Responses, &out.PerfResponseCacheHTTP10Responses
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCacheResponseHeaderMode != nil {
		in, out := &in.PerfResponseCacheResponseHeaderMode, &out.PerfResponseCacheResponseHeaderMode
		*out = new(string)
		**out = **in
	}
	if in.PerfResponseCacheResponseHeaders != nil {
		in, out := &in.PerfResponseCacheResponseHeaders, &out.PerfResponseCacheResponseHeaders
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PerfResponseCacheShield != nil {
		in, out := &in.PerfResponseCacheShield, &out.PerfResponseCacheShield
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseStaleContentMode != nil {
		in, out := &in.PerfResponseStaleContentMode, &out.PerfResponseStaleContentMode
		*out = new(string)
		**out = **in
	}
	if in.PerfResponseStaleContentTime != nil {
		in, out := &in.PerfResponseStaleContentTime, &out.PerfResponseStaleContentTime
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseTagResponseHeader != nil {
		in, out := &in.PerfResponseTagResponseHeader, &out.PerfResponseTagResponseHeader
		*out = new(string)
		**out = **in
	}
	if in.PerfTTLPreferLastModified != nil {
		in, out := &in.PerfTTLPreferLastModified, &out.PerfTTLPreferLastModified
		*out = new(bool)
		**out = **in
	}
	if in.PerfTTLUseShortestCaching != nil {
		in, out := &in.PerfTTLUseShortestCaching, &out.PerfTTLUseShortestCaching
		*out = new(bool)
		**out = **in
	}
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.RemoveSSL != nil {
		in, out := &in.RemoveSSL, &out.RemoveSSL
		*out = new(string)
		**out = **in
	}
	if in.RestrictedCnameReuse != nil {
		in, out := &in.RestrictedCnameReuse, &out.RestrictedCnameReuse
		*out = new(string)
		**out = **in
	}
	if in.SealLocation != nil {
		in, out := &in.SealLocation, &out.SealLocation
		*out = new(string)
		**out = **in
	}
	if in.SendSiteSetupEmails != nil {
		in, out := &in.SendSiteSetupEmails, &out.SendSiteSetupEmails
		*out = new(string)
		**out = **in
	}
	if in.SiteIP != nil {
		in, out := &in.SiteIP, &out.SiteIP
		*out = new(string)
		**out = **in
	}
	if in.WildcardSan != nil {
		in, out := &in.WildcardSan, &out.WildcardSan
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiteInitParameters.
func (in *SiteInitParameters) DeepCopy() *SiteInitParameters {
	if in == nil {
		return nil
	}
	out := new(SiteInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiteList) DeepCopyInto(out *SiteList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Site, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiteList.
func (in *SiteList) DeepCopy() *SiteList {
	if in == nil {
		return nil
	}
	out := new(SiteList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SiteList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiteObservation) DeepCopyInto(out *SiteObservation) {
	*out = *in
	if in.AccelerationLevel != nil {
		in, out := &in.AccelerationLevel, &out.AccelerationLevel
		*out = new(string)
		**out = **in
	}
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(float64)
		**out = **in
	}
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		*out = new(string)
		**out = **in
	}
	if in.Approver != nil {
		in, out := &in.Approver, &out.Approver
		*out = new(string)
		**out = **in
	}
	if in.DNSARecordName != nil {
		in, out := &in.DNSARecordName, &out.DNSARecordName
		*out = new(string)
		**out = **in
	}
	if in.DNSARecordValue != nil {
		in, out := &in.DNSARecordValue, &out.DNSARecordValue
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DNSCnameRecordName != nil {
		in, out := &in.DNSCnameRecordName, &out.DNSCnameRecordName
		*out = new(string)
		**out = **in
	}
	if in.DNSCnameRecordValue != nil {
		in, out := &in.DNSCnameRecordValue, &out.DNSCnameRecordValue
		*out = new(string)
		**out = **in
	}
	if in.DNSRecordName != nil {
		in, out := &in.DNSRecordName, &out.DNSRecordName
		*out = new(string)
		**out = **in
	}
	if in.DataStorageRegion != nil {
		in, out := &in.DataStorageRegion, &out.DataStorageRegion
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DomainRedirectToFull != nil {
		in, out := &in.DomainRedirectToFull, &out.DomainRedirectToFull
		*out = new(string)
		**out = **in
	}
	if in.DomainValidation != nil {
		in, out := &in.DomainValidation, &out.DomainValidation
		*out = new(string)
		**out = **in
	}
	if in.DomainVerification != nil {
		in, out := &in.DomainVerification, &out.DomainVerification
		*out = new(string)
		**out = **in
	}
	if in.ForceSSL != nil {
		in, out := &in.ForceSSL, &out.ForceSSL
		*out = new(string)
		**out = **in
	}
	if in.HashSalt != nil {
		in, out := &in.HashSalt, &out.HashSalt
		*out = new(string)
		**out = **in
	}
	if in.HashingEnabled != nil {
		in, out := &in.HashingEnabled, &out.HashingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IgnoreSSL != nil {
		in, out := &in.IgnoreSSL, &out.IgnoreSSL
		*out = new(string)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.LogsAccountID != nil {
		in, out := &in.LogsAccountID, &out.LogsAccountID
		*out = new(string)
		**out = **in
	}
	if in.NakedDomainSan != nil {
		in, out := &in.NakedDomainSan, &out.NakedDomainSan
		*out = new(bool)
		**out = **in
	}
	if in.OriginalDataCenterID != nil {
		in, out := &in.OriginalDataCenterID, &out.OriginalDataCenterID
		*out = new(float64)
		**out = **in
	}
	if in.PerfClientComplyNoCache != nil {
		in, out := &in.PerfClientComplyNoCache, &out.PerfClientComplyNoCache
		*out = new(bool)
		**out = **in
	}
	if in.PerfClientEnableClientSideCaching != nil {
		in, out := &in.PerfClientEnableClientSideCaching, &out.PerfClientEnableClientSideCaching
		*out = new(bool)
		**out = **in
	}
	if in.PerfClientSendAgeHeader != nil {
		in, out := &in.PerfClientSendAgeHeader, &out.PerfClientSendAgeHeader
		*out = new(bool)
		**out = **in
	}
	if in.PerfKeyComplyVary != nil {
		in, out := &in.PerfKeyComplyVary, &out.PerfKeyComplyVary
		*out = new(bool)
		**out = **in
	}
	if in.PerfKeyUniteNakedFullCache != nil {
		in, out := &in.PerfKeyUniteNakedFullCache, &out.PerfKeyUniteNakedFullCache
		*out = new(bool)
		**out = **in
	}
	if in.PerfModeHTTPS != nil {
		in, out := &in.PerfModeHTTPS, &out.PerfModeHTTPS
		*out = new(string)
		**out = **in
	}
	if in.PerfModeLevel != nil {
		in, out := &in.PerfModeLevel, &out.PerfModeLevel
		*out = new(string)
		**out = **in
	}
	if in.PerfModeTime != nil {
		in, out := &in.PerfModeTime, &out.PerfModeTime
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseCache300X != nil {
		in, out := &in.PerfResponseCache300X, &out.PerfResponseCache300X
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCache404Enabled != nil {
		in, out := &in.PerfResponseCache404Enabled, &out.PerfResponseCache404Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCache404Time != nil {
		in, out := &in.PerfResponseCache404Time, &out.PerfResponseCache404Time
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseCacheEmptyResponses != nil {
		in, out := &in.PerfResponseCacheEmptyResponses, &out.PerfResponseCacheEmptyResponses
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCacheHTTP10Responses != nil {
		in, out := &in.PerfResponseCacheHTTP10Responses, &out.PerfResponseCacheHTTP10Responses
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCacheResponseHeaderMode != nil {
		in, out := &in.PerfResponseCacheResponseHeaderMode, &out.PerfResponseCacheResponseHeaderMode
		*out = new(string)
		**out = **in
	}
	if in.PerfResponseCacheResponseHeaders != nil {
		in, out := &in.PerfResponseCacheResponseHeaders, &out.PerfResponseCacheResponseHeaders
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PerfResponseCacheShield != nil {
		in, out := &in.PerfResponseCacheShield, &out.PerfResponseCacheShield
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseStaleContentMode != nil {
		in, out := &in.PerfResponseStaleContentMode, &out.PerfResponseStaleContentMode
		*out = new(string)
		**out = **in
	}
	if in.PerfResponseStaleContentTime != nil {
		in, out := &in.PerfResponseStaleContentTime, &out.PerfResponseStaleContentTime
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseTagResponseHeader != nil {
		in, out := &in.PerfResponseTagResponseHeader, &out.PerfResponseTagResponseHeader
		*out = new(string)
		**out = **in
	}
	if in.PerfTTLPreferLastModified != nil {
		in, out := &in.PerfTTLPreferLastModified, &out.PerfTTLPreferLastModified
		*out = new(bool)
		**out = **in
	}
	if in.PerfTTLUseShortestCaching != nil {
		in, out := &in.PerfTTLUseShortestCaching, &out.PerfTTLUseShortestCaching
		*out = new(bool)
		**out = **in
	}
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.RemoveSSL != nil {
		in, out := &in.RemoveSSL, &out.RemoveSSL
		*out = new(string)
		**out = **in
	}
	if in.RestrictedCnameReuse != nil {
		in, out := &in.RestrictedCnameReuse, &out.RestrictedCnameReuse
		*out = new(string)
		**out = **in
	}
	if in.SealLocation != nil {
		in, out := &in.SealLocation, &out.SealLocation
		*out = new(string)
		**out = **in
	}
	if in.SendSiteSetupEmails != nil {
		in, out := &in.SendSiteSetupEmails, &out.SendSiteSetupEmails
		*out = new(string)
		**out = **in
	}
	if in.SiteCreationDate != nil {
		in, out := &in.SiteCreationDate, &out.SiteCreationDate
		*out = new(float64)
		**out = **in
	}
	if in.SiteIP != nil {
		in, out := &in.SiteIP, &out.SiteIP
		*out = new(string)
		**out = **in
	}
	if in.WildcardSan != nil {
		in, out := &in.WildcardSan, &out.WildcardSan
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiteObservation.
func (in *SiteObservation) DeepCopy() *SiteObservation {
	if in == nil {
		return nil
	}
	out := new(SiteObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiteParameters) DeepCopyInto(out *SiteParameters) {
	*out = *in
	if in.AccelerationLevel != nil {
		in, out := &in.AccelerationLevel, &out.AccelerationLevel
		*out = new(string)
		**out = **in
	}
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(float64)
		**out = **in
	}
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		*out = new(string)
		**out = **in
	}
	if in.Approver != nil {
		in, out := &in.Approver, &out.Approver
		*out = new(string)
		**out = **in
	}
	if in.DataStorageRegion != nil {
		in, out := &in.DataStorageRegion, &out.DataStorageRegion
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DomainRedirectToFull != nil {
		in, out := &in.DomainRedirectToFull, &out.DomainRedirectToFull
		*out = new(string)
		**out = **in
	}
	if in.DomainValidation != nil {
		in, out := &in.DomainValidation, &out.DomainValidation
		*out = new(string)
		**out = **in
	}
	if in.ForceSSL != nil {
		in, out := &in.ForceSSL, &out.ForceSSL
		*out = new(string)
		**out = **in
	}
	if in.HashSalt != nil {
		in, out := &in.HashSalt, &out.HashSalt
		*out = new(string)
		**out = **in
	}
	if in.HashingEnabled != nil {
		in, out := &in.HashingEnabled, &out.HashingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreSSL != nil {
		in, out := &in.IgnoreSSL, &out.IgnoreSSL
		*out = new(string)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.LogsAccountID != nil {
		in, out := &in.LogsAccountID, &out.LogsAccountID
		*out = new(string)
		**out = **in
	}
	if in.NakedDomainSan != nil {
		in, out := &in.NakedDomainSan, &out.NakedDomainSan
		*out = new(bool)
		**out = **in
	}
	if in.PerfClientComplyNoCache != nil {
		in, out := &in.PerfClientComplyNoCache, &out.PerfClientComplyNoCache
		*out = new(bool)
		**out = **in
	}
	if in.PerfClientEnableClientSideCaching != nil {
		in, out := &in.PerfClientEnableClientSideCaching, &out.PerfClientEnableClientSideCaching
		*out = new(bool)
		**out = **in
	}
	if in.PerfClientSendAgeHeader != nil {
		in, out := &in.PerfClientSendAgeHeader, &out.PerfClientSendAgeHeader
		*out = new(bool)
		**out = **in
	}
	if in.PerfKeyComplyVary != nil {
		in, out := &in.PerfKeyComplyVary, &out.PerfKeyComplyVary
		*out = new(bool)
		**out = **in
	}
	if in.PerfKeyUniteNakedFullCache != nil {
		in, out := &in.PerfKeyUniteNakedFullCache, &out.PerfKeyUniteNakedFullCache
		*out = new(bool)
		**out = **in
	}
	if in.PerfModeHTTPS != nil {
		in, out := &in.PerfModeHTTPS, &out.PerfModeHTTPS
		*out = new(string)
		**out = **in
	}
	if in.PerfModeLevel != nil {
		in, out := &in.PerfModeLevel, &out.PerfModeLevel
		*out = new(string)
		**out = **in
	}
	if in.PerfModeTime != nil {
		in, out := &in.PerfModeTime, &out.PerfModeTime
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseCache300X != nil {
		in, out := &in.PerfResponseCache300X, &out.PerfResponseCache300X
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCache404Enabled != nil {
		in, out := &in.PerfResponseCache404Enabled, &out.PerfResponseCache404Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCache404Time != nil {
		in, out := &in.PerfResponseCache404Time, &out.PerfResponseCache404Time
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseCacheEmptyResponses != nil {
		in, out := &in.PerfResponseCacheEmptyResponses, &out.PerfResponseCacheEmptyResponses
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCacheHTTP10Responses != nil {
		in, out := &in.PerfResponseCacheHTTP10Responses, &out.PerfResponseCacheHTTP10Responses
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseCacheResponseHeaderMode != nil {
		in, out := &in.PerfResponseCacheResponseHeaderMode, &out.PerfResponseCacheResponseHeaderMode
		*out = new(string)
		**out = **in
	}
	if in.PerfResponseCacheResponseHeaders != nil {
		in, out := &in.PerfResponseCacheResponseHeaders, &out.PerfResponseCacheResponseHeaders
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PerfResponseCacheShield != nil {
		in, out := &in.PerfResponseCacheShield, &out.PerfResponseCacheShield
		*out = new(bool)
		**out = **in
	}
	if in.PerfResponseStaleContentMode != nil {
		in, out := &in.PerfResponseStaleContentMode, &out.PerfResponseStaleContentMode
		*out = new(string)
		**out = **in
	}
	if in.PerfResponseStaleContentTime != nil {
		in, out := &in.PerfResponseStaleContentTime, &out.PerfResponseStaleContentTime
		*out = new(float64)
		**out = **in
	}
	if in.PerfResponseTagResponseHeader != nil {
		in, out := &in.PerfResponseTagResponseHeader, &out.PerfResponseTagResponseHeader
		*out = new(string)
		**out = **in
	}
	if in.PerfTTLPreferLastModified != nil {
		in, out := &in.PerfTTLPreferLastModified, &out.PerfTTLPreferLastModified
		*out = new(bool)
		**out = **in
	}
	if in.PerfTTLUseShortestCaching != nil {
		in, out := &in.PerfTTLUseShortestCaching, &out.PerfTTLUseShortestCaching
		*out = new(bool)
		**out = **in
	}
	if in.RefID != nil {
		in, out := &in.RefID, &out.RefID
		*out = new(string)
		**out = **in
	}
	if in.RemoveSSL != nil {
		in, out := &in.RemoveSSL, &out.RemoveSSL
		*out = new(string)
		**out = **in
	}
	if in.RestrictedCnameReuse != nil {
		in, out := &in.RestrictedCnameReuse, &out.RestrictedCnameReuse
		*out = new(string)
		**out = **in
	}
	if in.SealLocation != nil {
		in, out := &in.SealLocation, &out.SealLocation
		*out = new(string)
		**out = **in
	}
	if in.SendSiteSetupEmails != nil {
		in, out := &in.SendSiteSetupEmails, &out.SendSiteSetupEmails
		*out = new(string)
		**out = **in
	}
	if in.SiteIP != nil {
		in, out := &in.SiteIP, &out.SiteIP
		*out = new(string)
		**out = **in
	}
	if in.WildcardSan != nil {
		in, out := &in.WildcardSan, &out.WildcardSan
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiteParameters.
func (in *SiteParameters) DeepCopy() *SiteParameters {
	if in == nil {
		return nil
	}
	out := new(SiteParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiteSpec) DeepCopyInto(out *SiteSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiteSpec.
func (in *SiteSpec) DeepCopy() *SiteSpec {
	if in == nil {
		return nil
	}
	out := new(SiteSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SiteStatus) DeepCopyInto(out *SiteStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SiteStatus.
func (in *SiteStatus) DeepCopy() *SiteStatus {
	if in == nil {
		return nil
	}
	out := new(SiteStatus)
	in.DeepCopyInto(out)
	return out
}
